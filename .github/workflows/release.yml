---
name: Release

on:
  workflow_dispatch:
    inputs:
      tweet:
        description: "Tweet new release?"
        required: false
        default: "no"

env:
  LAMBDA_FUNCTION: alexa-skill-shabbat-times

jobs:
  release:
    runs-on: ubuntu-latest
    environment: deployment
    name: Publish, release, and announce
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Setup Java 11
        uses: actions/setup-java@v3.0.0
        with:
          distribution: adopt
          java-version: 11
          cache: maven

      - name: Configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build skill handler
        working-directory: ./lambda
        run: mvn package -Pzip -B -ff

      # https://aws.amazon.com/blogs/compute/tracking-the-state-of-lambda-functions/
      # yamllint disable rule:line-length
      # editorconfig-checker-disable
      - name: Get function state
        id: function_state
        run: |
          state=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION }} --query 'Configuration.State' --output text)
          echo '::set-output name=state::'"$state"

      - name: Verify function is in active state
        if: steps.function_state.outputs.state != 'Active'
        uses: actions/github-script@v6
        with:
          script: core.setFailed('the function is being updated, please try again later')

      - name: Deploy skill handler to lambda
        run: >
          aws lambda update-function-code
          --function-name ${{ env.LAMBDA_FUNCTION }}
          --zip-file fileb://./lambda/target/skill-handler-function.zip

      - name: Wait for function to be updated
        run: aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION }}

      - name: Publish lambda function
        id: publish_lambda
        run: |
          set -o pipefail
          function_version=$( aws lambda publish-version --function-name ${{ env.LAMBDA_FUNCTION }} | jq -r ".Version" )
          echo '::set-output name=function_version::'"$function_version"

      - name: Update alias Live with new function version
        run: >
          aws lambda update-alias
          --function-name ${{ env.LAMBDA_FUNCTION }}
          --name Live
          --function-version ${{ steps.publish_lambda.outputs.function_version }}

      - name: Determine release version and create changelog
        id: bumper
        uses: tomerfi/version-bumper-action@1.1.2

      - name: Configure git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Set new project version
        working-directory: ./lambda
        run: mvn versions:set -DnewVersion=${{ steps.bumper.outputs.new_version }} -DgenerateBackupPoms=false -B -ff

      - name: Commit, tag, and push
        run: |
          git add lambda/pom.xml
          git commit -m "build: bump version to ${{ steps.bumper.outputs.new_version }} [skip ci]"
          git push
          git tag ${{ steps.bumper.outputs.new_version }} -m "Function v${{ steps.publish_lambda.outputs.function_version }}"
          git push origin ${{ steps.bumper.outputs.new_version }}

      - name: Set development project version
        working-directory: ./lambda
        run: mvn versions:set -DnewVersion=${{ steps.bumper.outputs.next_dev_iteration }} -DgenerateBackupPoms=false -B -ff

      - name: Commit and push
        run: |
          git add lambda/pom.xml
          git commit -m "build: bump version to ${{ steps.bumper.outputs.next_dev_iteration }} [skip ci]"
          git push

      # yamllint enable rule:line-length
      # editorconfig-checker-enable

      - name: Create a release
        id: gh_release
        uses: actions/github-script@v6
        with:
          script: |
            const repo_name = context.payload.repository.full_name
            const response = await github.request('POST /repos/' + repo_name + '/releases', {
              tag_name: '${{ steps.bumper.outputs.new_version }}',
              name: 'Function v${{ steps.publish_lambda.outputs.function_version }}',
              generate_release_notes: true
            })
            core.setOutput('html_url', response.data.html_url)

      - name: Tweet new release
        if: ${{ github.event.inputs.tweet == 'yes' }}
        uses: lazy-actions/tweet-action@1.0.1
        with:
          oauth_consumer_key: ${{ secrets.TWITTER_API_KEY }}
          oauth_consumer_secret: ${{ secrets.TWITTER_API_SECRET_KEY }}
          oauth_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          oauth_token_secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          message: |
            ðŸš€ðŸŽ‰ Shabbat Times skill ${{ steps.bumper.outputs.new_version }} has been released! ðŸŽ‰ðŸš€
            ${{ steps.gh_release.outputs.html_url }}

            #shabbat_times_alexa_skill #alexa #java
