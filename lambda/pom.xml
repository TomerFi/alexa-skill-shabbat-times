<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>info.tomfi.alexa</groupId>
  <artifactId>shabbat-times</artifactId>
  <version>1.0.8.dev</version>
  <packaging>jar</packaging>
  <name>Shabbat Times</name>
  <description>Alexa skill handler for retrieving the Shabbat start and stop times in various cities around the world.</description>
  <url>https://www.amazon.com/Tomer-Figenblat-Shabbat-Times/dp/B072PRCHRD</url>
  <inceptionYear>2017</inceptionYear>

  <properties>
    <coverage.threshold>85%</coverage.threshold>
    <maven.compiler.release>11</maven.compiler.release>
    <maven.deploy.skip>true</maven.deploy.skip>
    <maven.install.skip>true</maven.install.skip>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- DEPENDENCIES -->
    <ask-sdk.version>2.84.0</ask-sdk.version>
    <auto-value.version>1.10.2</auto-value.version>
    <jackson.version>2.13.4</jackson.version>
    <shabbat-api.version>3.0.2</shabbat-api.version>
    <springframework.version>5.3.29</springframework.version>
    <!-- TESTING DEPENDENCIES -->
    <assertj.version>3.24.2</assertj.version>
    <equalsverifier.version>3.15.1</equalsverifier.version>
    <junit-jupiter.version>5.10.0</junit-jupiter.version>
    <mockito.version>5.2.0</mockito.version>
    <!-- Plugins -->
    <maven-assembly-plugin.version>3.6.0</maven-assembly-plugin.version>
    <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
    <maven-invoker-plugin.version>3.6.0</maven-invoker-plugin.version>
    <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>
    <jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>
    <junit-platform-maven-plugin.version>1.1.7</junit-platform-maven-plugin.version>
    <versions-maven-plugin.version>2.16.0</versions-maven-plugin.version>
  </properties>

  <licenses>
    <license>
      <name>The ISC License</name>
      <url>https://opensource.org/licenses/ISC</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>TomerFi</id>
      <name>Tomer Figenblat</name>
      <email>tomer@tomfi.info</email>
      <url>https://github.com/TomerFi</url>
    </developer>
  </developers>

  <issueManagement>
    <system>GitHub Issues</system>
    <url>https://github.com/TomerFi/alexa-skill-shabbat-times/issues</url>
  </issueManagement>

  <scm>
    <url>https://github.com/TomerFi/alexa-skill-shabbat-times</url>
    <connection>scm:git:https://github.com/TomerFi/alexa-skill-shabbat-times.git</connection>
  </scm>

  <ciManagement>
    <system>GitHub Workflows</system>
    <url>https://github.com/TomerFi/alexa-skill-shabbat-times/actions</url>
  </ciManagement>

  <dependencyManagement>
    <dependencies>
      <!-- ANNOTATION PROCESSING DEPENDENCIES -->
      <dependency>
        <groupId>com.google.auto.value</groupId>
        <artifactId>auto-value-annotations</artifactId>
        <version>${auto-value.version}</version>
      </dependency>
      <!-- CODING DEPENDENCIES -->
      <dependency>
        <groupId>info.tomfi.shabbat</groupId>
        <artifactId>shabbat-api</artifactId>
        <version>${shabbat-api.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazon.alexa</groupId>
        <artifactId>ask-sdk</artifactId>
        <version>${ask-sdk.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <!-- TESTING DEPENDENCIES -->
      <dependency>
        <groupId>nl.jqno.equalsverifier</groupId>
        <artifactId>equalsverifier</artifactId>
        <version>${equalsverifier.version}</version>
      </dependency>
      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <version>${assertj.version}</version>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>${junit-jupiter.version}</version>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-params</artifactId>
        <version>${junit-jupiter.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-inline</artifactId>
        <version>${mockito.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-junit-jupiter</artifactId>
        <version>${mockito.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- ANNOTATION PROCESSING DEPENDENCIES -->
    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value-annotations</artifactId>
      <scope>provided</scope>
    </dependency>
    <!-- CODING DEPENDENCIES -->
    <dependency>
      <groupId>info.tomfi.shabbat</groupId>
      <artifactId>shabbat-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.amazon.alexa</groupId>
      <artifactId>ask-sdk</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>
    <!-- TESTING DEPENDENCIES -->
    <dependency>
      <groupId>nl.jqno.equalsverifier</groupId>
      <artifactId>equalsverifier</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>verify</defaultGoal>

    <pluginManagement>
      <plugins>
        <!-- Apache Plugins -->
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${maven-assembly-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-invoker-plugin</artifactId>
          <version>${maven-invoker-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven-jar-plugin.version}</version>
        </plugin>
        <!-- Third-Party Plugins -->
        <plugin>
          <groupId>de.sormuras.junit</groupId>
          <artifactId>junit-platform-maven-plugin</artifactId>
          <version>${junit-platform-maven-plugin.version}</version>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${versions-maven-plugin.version}</version>
        </plugin>

        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
          <configuration>
            <propertyName>jacoco.java.option</propertyName>
            <rules>
              <rule>
                <limits>
                  <limit>
                    <minimum>${coverage.threshold}</minimum>
                  </limit>
                </limits>
              </rule>
            </rules>
            <excludes>
              <exclude>info/tomfi/alexa/shabbattimes/**/AutoValue_*</exclude> <!-- generated by auto-value -->
            </excludes>
          </configuration>
        </plugin>

      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>jacoco-prepare</id>
            <goals>
              <goal>prepare-agent</goal>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>de.sormuras.junit</groupId>
        <artifactId>junit-platform-maven-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <isolation>ABSOLUTE</isolation>
          <executor>JAVA</executor>
          <javaOptions>
            <additionalOptions>
              <jacoco>${jacoco.java.option}</jacoco>
              <cds>-Xshare:off</cds>
            </additionalOptions>
          </javaOptions>
          <parameters>
            <junit.jupiter.execution.parallel.enabled>true</junit.jupiter.execution.parallel.enabled>
            <junit.jupiter.displayname.generator.default>org.junit.jupiter.api.DisplayNameGenerator$ReplaceUnderscores</junit.jupiter.displayname.generator.default>
          </parameters>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>com.google.auto.value</groupId>
              <artifactId>auto-value</artifactId>
              <version>${auto-value.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <!-- use this profile for development stage. -->
    <profile>
      <id>dev</id>
      <properties>
        <coverage.threshold>0%</coverage.threshold>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <failOnWarning>false</failOnWarning>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Use this profile to create jacoco execution report. -->
    <profile>
      <id>cov</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>jacoco-report</id>
                <goals>
                    <goal>report</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Use this profile to run integration tests. -->
    <profile>
      <id>its</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-invoker-plugin</artifactId>
            <configuration>
              <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
              <localRepositoryPath>${project.build.directory}/local-it-repo</localRepositoryPath>
              <goals>
                <goal>test</goal>
              </goals>
              <settingsFile>src/it/settings.xml</settingsFile>
              <showErrors>true</showErrors>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>install</goal>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Use this profile to create zip file with all the dependencies for lambda upload. -->
    <profile>
      <id>zip</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <finalName>skill-handler-function</finalName>
              <descriptors>
                <descriptor>${project.basedir}/src/assembly/zip-with-dependencies.xml</descriptor>
              </descriptors>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

</project>
